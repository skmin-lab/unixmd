#!/usr/bin/perl

#
# PREPINP: routine to prepare integral input files for Columbus
# 
# Author: M. Barbatti, Jul 2006.
# modified for MOLCAS interface, F. Plasser May 2010
#

use lib join('/',$ENV{"COLUMBUS"},"CPAN") ;
$cbus  = $ENV{"COLUMBUS"};                    # Columbus environment
use colib_perl;

system("clear");

print "Input for DALTON (1) or MOLCAS (2): ";
read_choice();
$intprog=$_;

if ($intprog==1){$icol = "inpcol";}
elsif ($intprog==2) {$icol = "molcas.input";}

if (-s "$icol"){
  print "File $icol exists. Do you want to overwrite it? ";
  read_choice();
  if ($_=~/^n/i){
      &printbummer();
      exit;
  }
}

if  ($intprog==1){print "Enter the point group symmetry:  ";}
elsif ($intprog==2) {print "Enter the symmetry generators: ";
   print "\n(e.g. empty for c1, \"Z\" for Cs, \"XY\" for C2)\n";
}
read_choice();
$group = $_;

print "\nName of the file containing the cartesian coordinates
of the unique atoms (COLUMBUS format): ";
read_choice();
$file = $_;

if (!-s $file) {
   print "$file does not exist or is empty.\n";
   die;
}

read_geom();

if  ($intprog==1){
  print "Show only basis sets containing the following string:\n";
  print "(e.g. 6-31g, cc-pv - leave empty to show all basis sets)\n";
  read_choice();
  $filter = $_;
  
  set_basis();
  write_answers();
  print "\n\nNormal termination of prepinp. See result in inpcol. \n\n";
  &printbummer();
}
elsif ($intprog==2){
  print "Enter basis set: ";
  read_choice();
  $basis=$_;
  $sewardopts="ANGMOM\n 0 0 0\n";
  print "Include scalar relativistic effects? (y/n)";
  read_choice();
  if ($_=~/^y/i){$sewardopts.="RELINT\nR02O\nEXPERT\n";}
  print "Include spin-orbit coupling effects (AMFI)? (y/n)";
  read_choice();
  if ($_=~/^y/i){$sewardopts.="AMFI\n";}
  write_molcas();
  print "\n\nmolcas.input created (customize if necessary) \n\n";
  &printbummer();
}  


sub write_answers{

  open(IC,">$icol") or die "Cannot open $icol to write!";
  print IC "yes \n";
  print IC "yes \n";
  print IC "1 \n";
  print IC "$group \n";
  for ($i=1;$i<=$Nat;$i++){
      print  IC "add \n";
      printf IC "%i \n", $numb[$i];
      print  IC "$symb[$i] \n";
      print  IC "$x[$i] $y[$i] $z[$i] \n";
      print  IC "yes \n";
      print  IC "library \n";
      if ($non_standard_0{$symb[$i]} == 0){
         print IC "0 \n";
      }
      if ($non_standard_1{$symb[$i]} == 1){
         print IC "$path_tot{$symb[$i]} \n";
      }
      print  IC "$basis{$symb[$i]} \n";
      print  IC "yes \n";
      print  IC "proceed \n";
      print  IC "proceed \n";
  }
  print IC "proceed \n";
  print IC "yes \n";
  $answer="";
  print "Reorder geom file for geometry optimization and orbital print out? (y)\n";
# fp: this does not work!
#   -> do it simpler (see below)
# while(not ($answer =~ /^y/ or $answer =~ /^n/))
# {
#   read_choice();
#   $answer=lc($_);
#   $answer =~ s/^\s*//;
#   if ($answer=="") {$answer="y";}
# }
# $answer=$_;
# print "answer: $answer\n";
# if($answer =~ /^y/)
# {
#   print IC "yes \n";
#   print "printed yes\n";
# }
# else
# {
#   print IC "no \n";
#   print "printed no\n";
# }

  read_choice();
  if ($_=~/^n/i){print IC "no\n";}
  else {print IC "yes\n";}
  close(IC);
}

sub write_molcas{
  open(IC,">$icol") or die "Cannot open $icol to write!";
  print IC " &SEWARD  &END\n";
  print IC $sewardopts;
  print IC "*Molecule\n";
  if (!"$group" eq ""){
     print IC "Symmetry\n";
     print IC " $group\n";
  }
  $i=1;
  while ($i<=$Nat) {
    print IC "Basis set\n";
    print IC "$symb[$i].$basis\n";
    $osymb=$symb[$i];
    while ($i<=$Nat) {
       #print IC "$i,$j,$symb[$i],$symb[$j]\n";
       if ("$symb[$i]" eq "$osymb"){
          print  IC "$symb[$i]$i   $x[$i]   $y[$i]   $z[$i] \n";
          $i++;
       }
       else {
          last;
          #$j = $Nat+1; # exit the loop
       }
    }
    print IC "End of Basis\n";
  #$i++;
  } 
  print IC "End of Input\n";
  print IC "\n";
  print IC " &ALASKA  &END\nVERBOSE\n";
  print IC "SHOW GRADIENT CONTRIBUTIONS\nEnd of Input\n";
  close(IC);
}

sub set_basis{
  $until_now="";
#  $answer="y";
  print "-- Set basis set --\n";
#  while($answer =~ /^y/i){
#      print "\nType the atomic symbol to select the basis set (H, C, He, ...): ";
#      read_choice();
#      $el = $_;
  foreach $el ( keys %sumformula ){
      $el =~ s/^\s*//;         # remove leading blanks
      $el =~ s/\s*$//;         # remove trailing blanks
      $el =~ s/(\w+)/\u\L$1/g; # Capitalize first letter, force others to be small
      $path = "$cbus/source/iargos/basis";
      $path_tot{$el}="$path/$el.bas";
      $non_standard_1{$el}=0;
      while_basis();
      list_bas();
      if ($basis{$el} == 0){
         print "\nEnter the complete path to the library (eg. /home/mybasis.bas):";
         read_choice();
         $path_tot{$el}=$_;
         $non_standard_0{$el}=0;
         $non_standard_1{$el}=1;
         while_basis();
         list_bas();
      } else {
         $non_standard_0{$el}=1;
      }
      til_now();
  }
}

sub til_now{
$until_now=$until_now." $el :: $basis_title_selected{$el}\n";
print "\nUntil now you've set the following basis sets:
$until_now \n";
}

sub while_basis{
  while (!-e "$path_tot{$el}"){
     print "\n$path_tot{$el} does not exist.
Enter the complete path to the library (eg. /home/mybasis.bas):";
     read_choice();
     $path_tot{$el}=$_;
     $non_standard_1{$el}=1;
  }
}

sub list_bas{
   open(LB,"$path_tot{$el}") or die "Cannot read $path_tot{$el}!";
   $nb=1;
   while(<LB>){
      chomp;
      $basis_title[$nb]=$_;
      if (/$filter/)
      {
        print " $nb:   $basis_title[$nb] \n";
      }
      $nb++;
      $_=<LB>;
      chomp;
      $nbas=$_;
      if ($nbas eq ""){
         ($grb,$nbas)=split(/\s+/,$_);
      }
      for ($nb_i=1;$nb_i<=$nbas;$nb_i++){
          $_=<LB>;
          chomp;
          ($nprim,$grb)=split(/\s+/,$_);
          if ($nprim eq ""){
             ($grb,$nprim,$grb)=split(/\s+/,$_);
          }
          for ($np_i=1;$np_i<=$nprim;$np_i++){
              $_=<LB>;
          }
      }
   }
   close(LB);
   print " 0:    Other library \n";
   print "\nSelect the basis set for atom $el: ";
   read_choice();
   $basis{$el}=$_;
   $basis_title_selected{$el}=$basis_title[$basis{$el}];
}

sub read_geom  {
  my ($num_at, $charge, $mass);
  $n = 0;
  open(FL,$file) or die "Cannot open $file!";
  while(<FL>){
     chomp;
     $n++;
     s/^/ /;
      @temp = split(/\s+/,$_);
      $symb[$n]=$temp[1];
      $numb[$n]=$temp[2];
      $x[$n] = $temp[3];
      $y[$n] = $temp[4];
      $z[$n] = $temp[5];
      $M[$n] = $temp[6];
#     print "$symb[$n] $numb[$n] $x[$n] $y[$n] $z[$n] $M[$n] \n"; 
#     ($symb[$n],$numb[$n],$x[$n],$y[$n],$z[$n],$M[$n])=split(/\s+/,$_);
#     ($grb,$symb[$n],$numb[$n],$x[$n],$y[$n],$z[$n],$M[$n])=split(/\s+/,$_);
#    $symb[$n] =~ s/(\w+)/\u\L$1/g; # Capitalize first letter, force others to be small
  }
  $Nat = $n;
  print "\nNumber of atoms = $Nat \n";
  
  ($num_at, $charge, $mass, %sumformula) = &get_geom_info("$file");
    my $outstr = "Sum formula:      ";
       foreach $ssymb (keys %sumformula)
       {
        $outstr.= "$ssymb$sumformula{$ssymb} ";
       }
       $outstr.= "\n\n";
       print $outstr;
}

sub read_choice(){
  $_=<STDIN>;
  chomp;
}

sub printbummer {
  open BUMMER,">bummer";
  print BUMMER "normal termination of prepinp\n";
  close BUMMER;
  return;
  }
